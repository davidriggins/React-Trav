

- Create a React app without installation of tool
	npx create-react-app <app-name>

- To start
	npm start

- Index.js is generally entry point for react.
- App.js is the root component.

- Uses JSX
	- Some differences:
		- Can't use "class", use "className"
		- Can't user "for", user "htmlFor"
		
- Shortcut to create boiler plate of a component (with extension installed):
	rafce <tab>
	- creates this:
	
		import React from 'react';

		const Header = () => {
			return <div>Header</div>;
		};

	export default Header;

	- Don't need the import line anymore, so you can delete it.

- Create the component, import it, and embed it.

- You can pass props to the component:

	<Header title="Whatever">
	
	- And in the component add props as an argument and reference
	  the item you want:
	  
		const Header = (props) => {
			return (
				<header>
					<h1>{props.title}</h1>
				</header>
			);
		};
	
- You can also specify default prop values as such:

	Header.defaultProps = {
		title: 'Task Tracker',
	};
	
- You can destructure the props as such:

	({ title })
	
	and then reference it by title instead of props.title
	
- PropTypes
	- Shortcut is impt
		- Creates:
			import PropTypes from 'prop-types';

	- Then you specify a property type like:
	
		Header.propTypes = {
			title: PropTypes.string.isRequired,
		};
	
- Styling
	- You can use style sheets (index.css), style components, direct css
	  in javascript.
	- Example inline:
	
		<h1 style={{ color: 'red', backgroundColor: 'black' }}>{title}</h1>
		
	- Example:
	
		<h1 style={ headingStyle }>{title}</h1>
	
		const headingStyle = {
			color: 'red',
			backgroundColor: 'black',
		};
		
- Create a List with Map

	return (
        <>
            {tasks.map((task) => (
                <h3 key={task.id}>{task.text}</h3>
            ))}
        </>
    );
	
- State and useState Hook
	- this state is immutable so you cannot do tasks.push()
	- you can do something like this to add a new task:
	
		return (
			setTasks([...tasks, {}])
			...
			
	- useState 
	
	import { useState } from "react";

		const Tasks = () => {
			const [tasks, setTasks] = useState([
				{
					id: 1,
					...
				},
				...
			]};

- React Icons
	npm install react-icons
	
	import { FaTimes } from "react-icons/fa";
	...
		<h3>
			{task.text}{" "}
			<FaTimes style={{ color: "red", cursor: "pointer" }} />
		</h3>
	
- Prop drilling
	- State gets passed down, actions get passed up.
	
	
- Build for Production
	npm run build
	
	- This creates a build folder for which the content is ready for deploy
	